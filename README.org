* reveal-remote-mode
  reveal-remote-mode is an Emacs minor mode for remote controlling [[https://github.com/vlaaad/reveal][Reveal]], the "Read Eval /Visualize/ Loop" for Clojure. It leverages the [[https://vlaaad.github.io/reveal/#interacting-with-reveal-from-code][evaluated command form]] interface to afford the user convenient access to window control features and view opening. The package is still in an early state, so any feedback is appreciated.
  
  The mode currently relies on [[https://github.com/clojure-emacs/cider][CIDER]] and has only been tested on JVM Clojure via nrepl. The goal is to make it compatible with [[https://github.com/clojure-emacs/inf-clojure][inf-clojure]] and other repls in the future.

  Note that reveal-remote-mode does not provide any kind of view-type validation, meaning you are free to request a view that is incompatible with the form you are sending, resulting in an exception. This is not a problem per see, but could be good to know.

  For more information about Reveal, head over to the [[https://vlaaad.github.io/reveal/][docs]].

** Setup
   Until the mode is published on a package repository I recommend using [[https://github.com/raxod502/straight.el][straight]].

   #+begin_src emacs-lisp
   (use-package reveal-remote
     :straight (reveal-remote :type git :host github :repo "motform/reveal-remote")
     :hook (cider-mode . reveal-remote-mode))
   #+end_src
   
** Configuration
   reveal-remote-mode exposes two meaningful variables: the interrelated ~reveal-remote-mode-eval-in-other-ns~ and ~reveal-remote-other-ns~. By default Reveal evaluates the received form (and thus all sub forms) in the ~vlaaad.reveal.ext~ namespace, causing any unknown symbols to result in compile errors (as per regular Clojure semantics). We can configure this behavior using the ~:ns~ key, which reveal-remote-mode defaults to whatever is in ~*ns*~. Setting ~reveal-remote-mode-eval-in-other-ns~ allows you to toggle this behaviour (default ~t~), ~reveal-remote-other-ns~ allows you to specify the value of ~:ns~.

   In addition to these, there is also a list called ~reveal-remote-views~ that enumerates the possible Reveal views. This is the place where you would add custom views.

   | Variables                           | Values                                               |
   |-------------------------------------+------------------------------------------------------|
   | ~reveal-remote-mode-eval-in-other-ns~ | ~t~ (default), ~nil~                                     |
   | ~reveal-remote-other-ns~              | ~*ns*~ (default), any valid Clojure namespace (string) |
   | ~reveal-remote-views~                 | The default Reveal views                             |
   |-------------------------------------+------------------------------------------------------|

** Keymap
   The keymap defaults to the prefix ~C-c C-a~. You can change this by setting ~reveal-remote-mode-keymap-prefix~.

   | Key       | Function                               |
   |-----------+----------------------------------------|
   | ~C-c C-a l~ | ~reveal-remote-clear~                    |
   | ~C-c C-a q~ | ~reveal-remote-dispose~                  |
   | ~C-c C-a e~ | ~reveal-remote-submit~                   |
   | ~C-c C-a v~ | ~reveal-remote-open-view-last-sexp~      |
   | ~C-c C-a c~ | ~reveal-remote-open-view-defun-at-point~ |
   |-----------+----------------------------------------|

** TODO
  - Add a reasonable way to configure the ~:env~ key.
  - Add view-type validation.
  - Add an example of using a custom view.
  - Add a .gif or screencast to persuade the kids.
